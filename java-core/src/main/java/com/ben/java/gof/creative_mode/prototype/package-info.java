package com.ben.java.gof.creative_mode.prototype;

/**
 * 单例和原型是对立的(*****)
 * 1.定义
 * 原型模式: 不通过构造方法而是通过一个普通的方法去创建一个新对象, 复制/拷贝模式;
 *
 * 2.使用场景使用场景(解决什么类型问题, 无法解决什么类型问题, 使用中的注意项)
 *  浅克隆:  原型对象和克隆对象内存地址不同, 但是它俩内部同一个引用类型属性保存的是同一个内存地址, 因此会带来联动修改( java.lang.Cloneable[jdk,如果需要深拷贝,可以自己重写,ArrayList,Hashmap就重写了], BeanUtils[spring])
 *  深克隆:  通过序列化实现JVM层面的字节码克隆,同一份字节码分配在两块完全不同的内存地址上,它们之间没有任何的相同引用,如果原型对象本身是单例的,那么它会破坏单例模式,
 *
 * 3.源码分析
 *
 *
 *
 *
 */







